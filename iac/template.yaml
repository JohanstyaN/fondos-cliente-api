AWSTemplateFormatVersion: '2010-09-09'
Description: 'Client Funds Management System Infrastructure'

Parameters:
  BackendImageUri:
    Type: String
    Default: !Sub '${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/client-funds-backend:latest'
    Description: 'Backend Docker image URI (dynamically constructed)'
  
  FrontendImageUri:
    Type: String
    Default: !Sub '${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/client-funds-frontend:latest'
    Description: 'Frontend Docker image URI (dynamically constructed)'

Resources:
  # VPC and Networking
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
        - Key: Name
          Value: client-funds-vpc

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.1.0/24
      AvailabilityZone: !Select [0, !GetAZs '']
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: client-funds-public-subnet-1

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.2.0/24
      AvailabilityZone: !Select [1, !GetAZs '']
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: client-funds-public-subnet-2

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: client-funds-igw

  VPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: client-funds-public-rt

  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: VPCGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable

  # Security Groups
  ALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for Application Load Balancer
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
          Description: HTTP traffic from internet
      Tags:
        - Key: Name
          Value: client-funds-alb-sg

  ECSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for ECS tasks
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 8000
          ToPort: 8000
          SourceSecurityGroupId: !Ref ALBSecurityGroup
          Description: Backend traffic from ALB
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          SourceSecurityGroupId: !Ref ALBSecurityGroup
          Description: Frontend traffic from ALB
      Tags:
        - Key: Name
          Value: client-funds-ecs-sg

  # Application Load Balancer
  ApplicationLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: client-funds-alb
      Scheme: internet-facing
      Type: application
      Subnets:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      SecurityGroups:
        - !Ref ALBSecurityGroup
      Tags:
        - Key: Name
          Value: client-funds-alb

  # Target Groups
  FrontendTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: client-funds-frontend-tg
      Port: 80
      Protocol: HTTP
      VpcId: !Ref VPC
      TargetType: ip
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckIntervalSeconds: 30
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 3
      Tags:
        - Key: Name
          Value: client-funds-frontend-tg

  BackendTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: client-funds-backend-tg
      Port: 8000
      Protocol: HTTP
      VpcId: !Ref VPC
      TargetType: ip
      HealthCheckPath: /health
      HealthCheckProtocol: HTTP
      HealthCheckIntervalSeconds: 30
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 3
      Tags:
        - Key: Name
          Value: client-funds-backend-tg

  # ALB Listener
  ALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref FrontendTargetGroup
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: 80
      Protocol: HTTP

  # ALB Listener Rule for API routes
  ALBListenerRuleAPI:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
        - Type: forward
          TargetGroupArn: !Ref BackendTargetGroup
      Conditions:
        - Field: path-pattern
          Values:
            - '/api/*'
            - '/v1/*'
            - '/health'
            - '/docs'
            - '/openapi.json'
      ListenerArn: !Ref ALBListener
      Priority: 1

  # CloudWatch Log Group
  CloudWatchLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: /ecs/client-funds
      RetentionInDays: 14
      Tags:
        - Key: Name
          Value: client-funds-logs

  # ECS Cluster
  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: client-funds-cluster
      CapacityProviders:
        - FARGATE
      DefaultCapacityProviderStrategy:
        - CapacityProvider: FARGATE
          Weight: 1
      ClusterSettings:
        - Name: containerInsights
          Value: enabled
      Tags:
        - Key: Name
          Value: client-funds-cluster

  # IAM Roles
  ECSTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: client-funds-execution-role
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
      Tags:
        - Key: Name
          Value: client-funds-execution-role

  ECSTaskRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: client-funds-task-role
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: DynamoDBAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:GetItem
                  - dynamodb:PutItem
                  - dynamodb:UpdateItem
                  - dynamodb:DeleteItem
                  - dynamodb:Query
                  - dynamodb:Scan
                Resource:
                  - !GetAtt ClientsTable.Arn
                  - !GetAtt FundsTable.Arn
                  - !GetAtt TransactionHistoryTable.Arn
                  - !GetAtt ClientFundRelationTable.Arn
        - PolicyName: SNSAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - sns:Publish
                Resource:
                  - !Ref EmailNotificationTopic
                  - !Ref SMSNotificationTopic
      Tags:
        - Key: Name
          Value: client-funds-task-role

  # ECS Task Definition
  ECSTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: client-funds
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      Cpu: 512
      Memory: 1024
      ExecutionRoleArn: !Ref ECSTaskExecutionRole
      TaskRoleArn: !Ref ECSTaskRole
      ContainerDefinitions:
        - Name: backend
          Image: !Ref BackendImageUri
          Essential: true
          PortMappings:
            - ContainerPort: 8000
              Protocol: tcp
          Environment:
            - Name: SNS_EMAIL_TOPIC_ARN
              Value: !Ref EmailNotificationTopic
            - Name: SNS_SMS_TOPIC_ARN
              Value: !Ref SMSNotificationTopic
            - Name: AWS_DEFAULT_REGION
              Value: !Ref AWS::Region
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref CloudWatchLogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: backend
          HealthCheck:
            Command:
              - CMD-SHELL
              - 'curl -f http://localhost:8000/health || exit 1'
            Interval: 30
            Timeout: 5
            Retries: 3
            StartPeriod: 60
        - Name: frontend
          Image: !Ref FrontendImageUri
          Memory: 512
          Essential: true
          Environment:
            - Name: REACT_APP_API_URL
              Value: !Sub "http://${ApplicationLoadBalancer.DNSName}"
          PortMappings:
            - ContainerPort: 80
              Protocol: tcp
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref CloudWatchLogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: frontend
      Tags:
        - Key: Name
          Value: client-funds-task-definition

  # ECS Service
  ECSService:
    Type: AWS::ECS::Service
    DependsOn: ALBListener
    Properties:
      ServiceName: client-funds-service
      Cluster: !Ref ECSCluster
      TaskDefinition: !Ref ECSTaskDefinition
      DesiredCount: 1
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          SecurityGroups:
            - !Ref ECSSecurityGroup
          Subnets:
            - !Ref PublicSubnet1
            - !Ref PublicSubnet2
          AssignPublicIp: ENABLED
      LoadBalancers:
        - ContainerName: frontend
          ContainerPort: 80
          TargetGroupArn: !Ref FrontendTargetGroup
        - ContainerName: backend
          ContainerPort: 8000
          TargetGroupArn: !Ref BackendTargetGroup
      Tags:
        - Key: Name
          Value: client-funds-service

  # DynamoDB Tables
  ClientsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: Clients
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: user_id
          AttributeType: S
      KeySchema:
        - AttributeName: user_id
          KeyType: HASH
      Tags:
        - Key: Name
          Value: client-funds-clients-table

  FundsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: Funds
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: id_fund
          AttributeType: S
      KeySchema:
        - AttributeName: id_fund
          KeyType: HASH
      Tags:
        - Key: Name
          Value: client-funds-funds-table

  TransactionHistoryTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: TransactionHistory
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: transaction_id
          AttributeType: S
      KeySchema:
        - AttributeName: transaction_id
          KeyType: HASH
      Tags:
        - Key: Name
          Value: client-funds-transactions-table

  ClientFundRelationTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: ClientFundRelation
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: user_id#fund_id
          AttributeType: S
      KeySchema:
        - AttributeName: user_id#fund_id
          KeyType: HASH
      Tags:
        - Key: Name
          Value: client-funds-relations-table

  # SNS Topics
  EmailNotificationTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: client-funds-email-notifications
      DisplayName: Client Funds Email Notifications
      Tags:
        - Key: Name
          Value: client-funds-email-topic

  SMSNotificationTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: client-funds-sms-notifications
      DisplayName: Client Funds SMS Notifications
      Tags:
        - Key: Name
          Value: client-funds-sms-topic

Outputs:
  ApplicationURL:
    Description: URL to access the application
    Value: !Sub 'http://${ApplicationLoadBalancer.DNSName}'
    Export:
      Name: client-funds-app-url

  LoadBalancerDNS:
    Description: DNS name of the Load Balancer
    Value: !GetAtt ApplicationLoadBalancer.DNSName
    Export:
      Name: client-funds-alb-dns

  ECSClusterName:
    Description: Name of the ECS cluster
    Value: !Ref ECSCluster
    Export:
      Name: client-funds-cluster-name

  ECSServiceName:
    Description: Name of the ECS service
    Value: !GetAtt ECSService.Name
    Export:
      Name: client-funds-service-name

  EmailTopicArn:
    Description: ARN of the email notification topic
    Value: !Ref EmailNotificationTopic
    Export:
      Name: client-funds-email-topic-arn

  SMSTopicArn:
    Description: ARN of the SMS notification topic
    Value: !Ref SMSNotificationTopic
    Export:
      Name: client-funds-sms-topic-arn
    Export:
      Name: client-funds-sms-topic-arn
